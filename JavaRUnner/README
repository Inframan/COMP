CONTEUDO DESTE FICHEIRO
---------------------
  
 	* Introdução 
 	* Identificação dos Autores
 	* Instruções de Compilação
 	* Descrição dos Exemplos
 	* Descrição de Utilização
 	* Análise Lexical
 	* Análise Sintática
 	* Análise Semântica
 	* Representação(ões) Intermédia(s)
 	* Geração de Código
	* Arquitetura
	* Pontos Positivos
	* Pontos Negativos


INTRODUÇÃO
------------

XML2SDL

A tool to convert airport specification files in XML (obtained from FSX BGL files) into SDL. In Flight Simulator X (FSX), airport information (as well as most scenery information) is coded into BGL files. These are compiled from XML sources, and tools such as Bgl2Xml [1] can decompile the information back into the XML format, which contains much information regarding the physical and visual aspects of airports and other simulation elements [2]. A framework developed at LIACC (for multi-vehicle mission simulation) uses a cut-down format for specifying airports 3. The XML2SDL tool should be able to parse the XML information generated by the Bgl2Xml tool and output the airport information in the SDL format.

	* http://www.scruffyduckscenery.co.uk/SDE.html

	* https://msdn.microsoft.com/en-us/library/cc526978.aspx

	* http://www.fe.up.pt/~dcs/Platform/#langs



IDENTIFICAÇÃO DOS AUTORES
------------

O grupo a que o presente trabalho pertence é o grupo G23. Este grupo tem como membros os seguintes estudantes:

	* Ana Rita Ferreira - ei12052 

	* Gabriel Martins Souto - ei12087 

	* Jorge Filipe Teixeira - ei12030

	* José Alberto Cardoso - ei12027


INSTRUÇÕES DE COMPILAÇÃO
------------
O nosso projecto foi feito no IDE Eclipse.
Para compilar os ficheiros gerados pelo ANTLR, é necessário criar um projecto de ANTLR.
Para compilar o projecto em si, é necessário usar os ficheiros de ANTLR gerados na pasta de um projecto java.
Caso sejam feitas alterações a nível semântico ou lexical, será necessário recompilar com um projecto de ANTLR, o qual precisa do plug-in Antlr para eclipse. Se forem alterações ao nível semântico, ser necessário recompilar num projecto de java que deve conter os binários de JDOM e do ANTLR que se podem descarregar aqui: http://www.jdom.org/downloads/index.html e aqui http://www.antlr.org/download.html.
Os argumentos que o nosso projecto aceita podem ser nulos, uma string com o directório do ficheiro XML que se deseja transformar, ou duas strings com o directório de entrada e de saída.
Caso não sejam fornecidos argumentos, o jar irá buscar o ficheiro "Portugal CentroNorte.bgl.xml" e fazer o output para "Output.sdl"
Caso seja dado um argumento, o output será "Output.sdl"

DESCRIÇÃO DOS EXEMPLOS
------------
Um exemplo em que o ficheiro de input esteja de acordo com o esperado(AirportInputFile.xml), o resultado da compilação do nosso projeto deverá criar o ficheiro de output SDL esperado. Se o ficheiro de input contemplar um erro lexical(AirportInputFile - erro lexical.xml), por exemplo, existir um atributo escrito de forma errada não gera o ficheiro de output SDL e mostra uma mensagem de erro que avise do erro encontrado. Isto acontece também caso o ficheiro contemple um erro semântico (AirportInputFile - erro semântico.xml), por exemplo, o vlor de um atributo ser do tipo inteiro, no entanto o valor encontrado é uma string e no caso do ficheiro contemplar um erro sintático (AirportInputFile - erro sintático.xml) no caso de, por exemplo, o ficheiro não ter definido o atributo e a frase ser só igual valor.


DESCRIÇÃO DE UTILIZAÇÃO
------------
Usar quando se quer converter um XML (obtido através da transformação de um BGL) para formato SDL.

ANÁLISE LEXICAL
------------
O ficheiro e análise lexical estão no AirportParser.g4.
Aparecem mensagens de erro quando existem tokens inesperados.

ANÁLISE SINTÁTICA
------------
O ficheiro e análise lexical estão no AirportParser.g4.
As nossas mensagens de erros sintáticos estão sob a forma de system.out.

ANÁLISE SEMÂNTICA
------------
O ficheiro de análise semântica é o Listener.java.
As nossas mensagens de erros semânticos estão sob a forma de system.out


REPRESENTAÇÃO(ÕES) INTERMÉDIA(S)
------------
O nosso programa usa HashMaps para guardar a tabela de símbolos.

GERAÇÃO DE CÓDIGO
------------
O nosso código final é feito acedendo aos HashMaps guardados anteriormente, usando-se a API JDOM para converter para o formato XML.


ARQUITETURA
------------
O nosso programa tem dois sub-projectos.
O primeiro é o parser/lexer com ANTLR.
O segundo é o tratamento da semântica e geração do SDL em java (e uso da API JDOM), com os tokens gerados mais três classes adiconais. (O main, o gerador do sdl e o tratador de semântica).


PONTOS POSITIVOS
------------
Temos controlo de erros.
Geramos o ficheiro.

PONTOS NEGATIVOS
------------
Um bug encontrado foi o parser retornar missing value qundo a string é 0, pelo que foi atribuído o valor 0 de forma hard-coded a essa variável no caso e retornar missing value. Este caso seria um ponto a melhorar, ou seja, encontrar outra forma de resolver o problema.